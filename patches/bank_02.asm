SECTION "Bank 2 Code", ROMX[Bank02_FreeSpace], BANK[$02]

; see patches/play_music.asm
PATCH_PlayMusic_Redirect:
	ldh a, [hSGB]
	and a
	jr nz, .on_sgb
; do GBC code
	ld a, e
	and a
	jr z, .gbc_no_music
	farcall BANK__PlayMusic, _PlayMusic
	ret
.gbc_no_music
	farcall BANK__InitSound, _InitSound
	ret
; SGB code goes here
.on_sgb
	ld a, 1
	ld [wCheckAndFadeMusicID], a
	; fallback here

SGB_PlayMusic_Common:
; de = music id
	ld a, e
	and a
	jr z, .stop_music
	ld c, $10	; SGB packet size
; copy MSU1 call template to RAM
	push de
	  ld hl, MSU1SoundTemplate
	  ld de, wMSU1PacketSend
.copy_template
	  ld a, [hl+]
	  ld [de], a
	  inc de
	  dec c
	  jr nz, .copy_template
	pop de
	ld a, [wCheckAndFadeMusicID]
	and a, %00000010		; grab just the fade bit
	or a, 1				; enable restart
	ld hl, wMSU1PacketSend + 5
	ld [hli], a			; ask for a restart
					; wMSU1PacketSend + 6
	ld a, e
	ld [hli], a			; set new track ID
					; wMSU1PacketSend + 7
	inc hl				; wMSU1PacketSend + 8
	inc hl				; wMSU1PacketSend + 9
	ld a, 1				; XXX: Looping mode
	ld [hl], a
; send the packet over
	ld hl, wMSU1PacketSend
	jp _PushSGBPals
.stop_music
	ld hl, StopMusicPacket
	jp _PushSGBPals

; see patches/msu1.asm
include "patches/msu1/_bootstrap.asm"	; generated by makefile

JumpToMSU1EntryPoint: sgb_jump $1810, 0, 0, 0
MSU1SoundTemplate:: sgb_data_snd $1800, $0, 5
	;   R #l #h  V    M
	db  1, 0, 0, $FF, 0
	ds 6, 0
UpdateVolumePacket:: sgb_data_snd $1800, $0, 1
	db  %01000000
	ds 10, 0
StopMusicPacket:: sgb_data_snd $1800, $0, 1
	db  %00100000
	ds 10, 0
DuckMusicPacket:: sgb_data_snd $1807, $0, 1
	db  255/3
	ds 10, 0
UnduckMusicPacket:: sgb_data_snd $1807, $0, 1
	db  0
	ds 10, 0
